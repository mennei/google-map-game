{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nclass MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ballLocation: {\n        lat: 0,\n        lng: 0\n      },\n      goalLocation: {\n        lat: 0,\n        lng: 0\n      },\n      loading: true\n    });\n\n    _defineProperty(this, \"onMarkerDragEnd\", coord => {\n      const {\n        latLng\n      } = coord;\n      const lat = latLng.lat();\n      const lng = latLng.lng();\n      this.setState({\n        ballLocation: {\n          lat: lat,\n          lng: lng\n        },\n        loading: false\n      }, () => {\n        let {\n          ballLocation,\n          goalLocation\n        } = this.state;\n        ballLocation = _JSON$stringify(ballLocation);\n        goalLocation = _JSON$stringify(goalLocation);\n        return fetch(`http://localhost:3000/api/v1/googleMap/getDistance?ballLocation=${ballLocation}&goalLocation=${goalLocation}`).then(resopnse => resopnse.json()).then(data => {\n          this.setState({\n            ballLocation: {\n              lat: lat,\n              lng: lng\n            },\n            loading: false\n          });\n\n          if (data && data['data'] < 0.01) {\n            console.log('GOAL!!!!!!!!!');\n            alert('GOAL!!!!!!');\n          }\n        }).catch(err => console.log(err));\n      });\n    });\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      this.setState({\n        ballLocation: {\n          lat: 33.02499278880199,\n          lng: 35.28442144393921\n        }\n      }, () => {\n        console.log(this.state);\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    const {\n      loading,\n      ballLocation\n    } = this.state;\n    const url = `http://localhost:3000/api/v1/googleMap/getGoalLocationService?latitude=${ballLocation.lat}&longitude=${ballLocation.lng}`;\n\n    if (loading) {\n      fetch(url).then(resopnse => resopnse.json()).then(data => {\n        this.setState({\n          goalLocation: {\n            lat: data.data.lat,\n            lng: data.data.lng\n          },\n          loading: false\n        });\n      }).catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      ballLocation,\n      goalLocation\n    } = this.state;\n    const {\n      google\n    } = this.props;\n\n    if (loading) {\n      return null;\n    }\n\n    return React.createElement(Map, {\n      google: google,\n      zoom: 16,\n      style: mapStyles,\n      initialCenter: ballLocation\n    }, React.createElement(Marker, {\n      name: 'Ball position',\n      position: ballLocation,\n      icon: {\n        url: 'static/ball.png',\n        anchor: new google.maps.Point(32, 32),\n        scaledSize: new google.maps.Size(64, 64)\n      },\n      draggable: true,\n      onDragend: (t, map, coord) => this.onMarkerDragEnd(coord)\n    }), React.createElement(Marker, {\n      name: 'Goal position',\n      position: {\n        lat: goalLocation.lat,\n        lng: goalLocation.lng\n      },\n      icon: {\n        url: 'static/goal.png'\n      }\n    }));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDUb9IkmIUP3Wlzir40A0jn3bR4FbBpl1k'\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\user\\projects\\ludus\\menachem-app\\src\\fe\\MapContainer.js"],"names":["React","Component","fetch","Map","GoogleApiWrapper","Marker","mapStyles","width","height","MapContainer","ballLocation","lat","lng","goalLocation","loading","coord","latLng","setState","state","then","resopnse","json","data","console","log","alert","catch","err","componentDidMount","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","componentDidUpdate","url","render","google","props","anchor","maps","Point","scaledSize","Size","t","map","onMarkerDragEnd","apiKey"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {Map, GoogleApiWrapper, Marker} from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '100%',\r\n};\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    ballLocation: {\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    goalLocation: {\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    loading: true,\r\n  };\r\n\r\n  componentDidMount () {\r\n    navigator.geolocation.getCurrentPosition (position => {\r\n      const {latitude, longitude} = position.coords;\r\n      this.setState (\r\n        {\r\n          ballLocation: {\r\n            lat: 33.02499278880199,\r\n            lng: 35.28442144393921,\r\n          },\r\n        },\r\n        () => {\r\n          console.log (this.state);\r\n        }\r\n      );\r\n    });\r\n  }\r\n  componentDidUpdate () {\r\n    const {loading, ballLocation} = this.state;\r\n    const url = `http://localhost:3000/api/v1/googleMap/getGoalLocationService?latitude=${ballLocation.lat}&longitude=${ballLocation.lng}`;\r\n    if (loading) {\r\n      fetch (url)\r\n        .then (resopnse => resopnse.json ())\r\n        .then (data => {\r\n          this.setState ({\r\n            goalLocation: {\r\n              lat: data.data.lat,\r\n              lng: data.data.lng,\r\n            },\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch (err => console.log (err));\r\n    }\r\n  }\r\n\r\n  onMarkerDragEnd = coord => {\r\n    const {latLng} = coord;\r\n    const lat = latLng.lat ();\r\n    const lng = latLng.lng ();\r\n    this.setState (\r\n      {\r\n        ballLocation: {lat: lat, lng: lng},\r\n        loading: false,\r\n      },\r\n      () => {\r\n        let {ballLocation, goalLocation} = this.state;\r\n        ballLocation = JSON.stringify (ballLocation);\r\n        goalLocation = JSON.stringify (goalLocation);\r\n        return fetch (\r\n          `http://localhost:3000/api/v1/googleMap/getDistance?ballLocation=${ballLocation}&goalLocation=${goalLocation}`\r\n        )\r\n          .then (resopnse => resopnse.json ())\r\n          .then (data => {\r\n            this.setState ({\r\n              ballLocation: {lat: lat, lng: lng},\r\n              loading: false,\r\n            });\r\n            if (data && data['data'] < 0.01) {\r\n              console.log ('GOAL!!!!!!!!!');\r\n              alert ('GOAL!!!!!!');\r\n            }\r\n          })\r\n          .catch (err => console.log (err));\r\n      }\r\n    );\r\n  };\r\n\r\n  render () {\r\n    const {loading, ballLocation, goalLocation} = this.state;\r\n    const {google} = this.props;\r\n\r\n    if (loading) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Map\r\n        google={google}\r\n        zoom={16}\r\n        style={mapStyles}\r\n        initialCenter={ballLocation}\r\n      >\r\n        <Marker\r\n          name={'Ball position'}\r\n          position={ballLocation}\r\n          icon={{\r\n            url: 'static/ball.png',\r\n            anchor: new google.maps.Point (32, 32),\r\n            scaledSize: new google.maps.Size (64, 64),\r\n          }}\r\n          draggable={true}\r\n          onDragend={(t, map, coord) => this.onMarkerDragEnd (coord)}\r\n        />\r\n\r\n        <Marker\r\n          name={'Goal position'}\r\n          position={{lat: goalLocation.lat, lng: goalLocation.lng}}\r\n          icon={{\r\n            url: 'static/goal.png',\r\n          }}\r\n        />\r\n\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper ({\r\n  apiKey: 'AIzaSyDUb9IkmIUP3Wlzir40A0jn3bR4FbBpl1k',\r\n}) (MapContainer);\r\n"]},"metadata":{},"sourceType":"module"}